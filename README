See `README.lambdamoo' for general information on LambdaMOO.

More information on Stunt is available here: http://stunt.io/.  If you
want to get up and running quickly, consider starting with Improvise,
the Stunt starter kit: https://github.com/toddsundsted/improvise.

This is Release 9 of the Stunt extensions to the LambdaMOO server.  It
is based on the latest "1.8.3+" version from SourceForge.  Read the
very important WARNING below before running this on your existing
database!!!

Release 9 includes major new functionality in anonymous (garbage
collected) objects.  The release also includes more documentation and
fixes/enhancements to JSON parsing/generation, multiple inheritance,
map/list limits.

Anonymous objects are objects without an assigned object number, and
without a slot in the array of permanent/managed objects.  In many
ways they look like permanent objects -- they can inherit verbs and
properties from one or more parent objects, and they can have verb and
property definitions of their own.  However, unlike permanent objects,
they are garbage collected when no longer used (more specifically,
when no value or code holds a reference to them).  Perhaps more
importantly, their anonymity makes them easier to secure -- it's
impossible to forge a reference to an anonymous object.

To create an anonymous object, pass the integer `1' as the final
argument to `create()' (e.g. "create(#123, 1);"). The resulting object
is bare (it's basically a pointer directly to the `Object' struct).
Only wizards and owners can create anonymous objects, however, there
is a new `a' flag that indicates (in a manner similar to the `f' flag)
that an object can be the parent of anonymous children.

There are a few exceptions to the "anonymous objects are just like
permanent objects" guideline.  Anonymous objects cannot be parents of
other objects.  Anonymous objects don't show up in an another
objects's contents, location, parents, or children, nor can an
anonymous object own other objects; since anonymous objects are not
tracked as children of other objects, there's no easy way to fix up
the properties layout if parents/properties change in an ancestor --
so an anonymous object simply becomes invalid when structural changes
happen up the line.  Some of these restrictions may be lifted in the
future.

Stunt includes the following functionality not found in the main
server:

1) Multiple-Inheritance
   `create()' now takes either an object number or a list of object
   numbers in the first argument position.  Two new built-ins,
   `parents()' and `chparents()', manipulate an object's parents.  The
   built-ins `parent()' and `chparent()' exist for backward
   compatibility -- when an object has multiple parents these
   built-ins operate on the first parent.

2) Anonymous objects
   Objects without an assigned object number that are accessible via
   an unforgeable references, and which are automatically garbage
   collected when no longer reachable.

3) Task Local Storage
   The built-ins `task_local' and `set_task_local' retrieve/store a
   task local value.  The value is automatically freed when the task
   finishes.

4) Map Datatype
   The server includes a native map datatype based on a binary search
   tree (specifically, a red-black tree).  The implementation allows
   in-order traversal, efficient lookup/insertion/deletion, and
   supports existing MOO datatypes as values (keys may not be lists or
   maps).  Index, range, and looping operations on lists and strings
   also work on maps.

5) JSON Parsing/Generation
   The built-ins `parse_json' and `generate_json' transform MOO
   datatypes from/to JSON.

6) New Built-in Cryptographic Operations
   The new cryptographic operations include SHA-1 and SHA-256 hashes.
   The existing MD5 hash algorithm is broken from a cryptographic
   standpoint, as is SHA-1 -- both are included for interoperability
   with existing applications (both are still popular) but the default
   for `string_hash'/`binary_hash'/`value_hash' is now SHA-256.  Stunt
   also includes the HMAC-SHA-256 algorithm for generating secure,
   hash- based message authentication codes.

7) Built-in Base64 Encoding/Decoding
   The built-ins `encode_base64' and `decode_base64' encode and decode
   Base64-encoded strings.

8) An Improved FileIO Patch
   The 1.5p1 patch that is in wide circulation has flaws, including two
   server crashing bugs.  This patch fixes those bugs/flaws without
   changing the API.

9) Secure Suspending Process Exec
   The exec functionality adds an `exec' built-in which securely
   forks/execs an external executable.  It doesn't use the `system()'
   call, which is hard to secure and which blocks the server.
   `exec()' takes two parameters, a list of strings comprising the
   program and its arguments, and a MOO binary string that is sent to
   stdin.  It suspends the current task so the server can continue
   serving other tasks, and eventually returns the process termination
   code, stdout, and stderr in a list.

10) Verb Calls on Primitive Types
   The server supports verbs calls on primitive types (numbers,
   strings, etc.) so calls like `"foo bar":split()' can be implemented
   and work as expected (they were always syntactically correct but
   resulted in an E_TYPE error).  Verbs are implemented on prototype
   object delegates ($int_proto, $float_proto, $str_proto, etc.).  The
   server transparently invokes the correct verb on the appropriate
   prototype -- the primitive value is the value of `this'.

11) In Server HTTP Parsing
    The server uses the excellent Node HTTP parsing library to
    natively parse HTTP requests and responses into key/value pairs in
    a map datatype.  The parser handles corner cases correctly and
    supports things like HTTP upgrade (for using WebSockets, for
    example).  It's also much much faster than parsers implemented in
    MOO code.

12) Testing Framework
    The server includes a unit testing framework based on Ruby's
    Test-Unit.  It includes a Parslet parser (two, actually) for
    turning moo-code values into Ruby values, which makes writing
    tests much easier.  The new code is covered very well by the
    existing tests.

WARNING: This server changes the database format in a non-backward
compatible way in order to persist multiple-parent relationships.  The
server will automatically upgrade version 4 databases, however THERE
IS NO WAY BACK!

Use Github and the Github issue system for feedback and bugs!

Todd
