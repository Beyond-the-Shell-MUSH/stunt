From e927878e64b3a9bcb3fbe8b27fa942e9dee16ea5 Mon Sep 17 00:00:00 2001
From: Steve Wainstead <wainstead@gmail.com>
Date: Sun, 28 Jun 2009 23:36:23 +0000
Subject: [PATCH 023/223] various casts to make the compiler happy

---
 server/objects.c |   32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/server/objects.c b/server/objects.c
index 479abdb..2e99d20 100644
--- a/server/objects.c
+++ b/server/objects.c
@@ -145,11 +145,11 @@ do_move(Var arglist, Byte next, struct bf_move_data *data, Objid progr)
 static package
 bf_move(Var arglist, Byte next, void *vdata, Objid progr)
 {
-    struct bf_move_data *data = vdata;
+  struct bf_move_data *data = (bf_move_data *)vdata;
     package p;
 
     if (next == 1) {
-	data = alloc_data(sizeof(*data));
+        data = (bf_move_data *) alloc_data(sizeof(*data));
 	data->what = arglist.v.list[1].v.obj;
 	data->where = arglist.v.list[2].v.obj;
     }
@@ -165,7 +165,7 @@ bf_move(Var arglist, Byte next, void *vdata, Objid progr)
 static void
 bf_move_write(void *vdata)
 {
-    struct bf_move_data *data = vdata;
+  struct bf_move_data *data = (bf_move_data *) vdata;
 
     dbio_printf("bf_move data: what = %d, where = %d\n",
 		data->what, data->where);
@@ -174,7 +174,7 @@ bf_move_write(void *vdata)
 static void *
 bf_move_read()
 {
-    struct bf_move_data *data = alloc_data(sizeof(*data));
+    struct bf_move_data *data = (bf_move_data *) alloc_data(sizeof(*data));
 
     if (dbio_scanf("bf_move data: what = %d, where = %d\n",
 		   &data->what, &data->where) == 2)
@@ -236,7 +236,7 @@ bf_max_object(Var arglist, Byte next, void *vdata, Objid progr)
 static package
 bf_create(Var arglist, Byte next, void *vdata, Objid progr)
 {				/* (parent [, owner]) */
-    Objid *data = vdata;
+    Objid *data = (Objid *) vdata;
     Var r;
 
     if (next == 1) {
@@ -264,7 +264,7 @@ bf_create(Var arglist, Byte next, void *vdata, Objid progr)
 	    db_set_object_owner(oid, owner == NOTHING ? oid : owner);
 	    db_change_parent(oid, parent);
 
-	    data = alloc_data(sizeof(*data));
+	    data = (Objid *) alloc_data(sizeof(*data));
 	    *data = oid;
 	    args = new_list(0);
 	    e = call_verb(oid, "initialize", args, 0);
@@ -301,7 +301,7 @@ bf_create_write(void *vdata)
 static void *
 bf_create_read(void)
 {
-    Objid *data = alloc_data(sizeof(Objid));
+    Objid *data = (Objid *) alloc_data(sizeof(Objid));
 
     if (dbio_scanf("bf_create data: oid = %d\n", data) == 1)
 	return data;
@@ -361,7 +361,7 @@ struct children_data {
 static int
 add_to_list(void *data, Objid child)
 {
-    struct children_data *d = data;
+  struct children_data *d = (children_data *) data;
 
     d->i++;
     d->r.v.list[d->i].type = TYPE_OBJ;
@@ -413,7 +413,7 @@ move_to_nothing(Objid oid)
 static int
 first_proc(void *data, Objid oid)
 {
-    Objid *oidp = data;
+    Objid *oidp = (Objid *) data;
 
     *oidp = oid;
     return 1;
@@ -435,7 +435,7 @@ bf_recycle(Var arglist, Byte func_pc, void *vdata, Objid progr)
     Objid oid, c;
     Var args;
     enum error e;
-    Objid *data = vdata;
+    Objid *data = (Objid *) vdata;
 
     switch (func_pc) {
     case 1:
@@ -447,7 +447,7 @@ bf_recycle(Var arglist, Byte func_pc, void *vdata, Objid progr)
 	else if (!controls(progr, oid))
 	    return make_error_pack(E_PERM);
 
-	data = alloc_data(sizeof(*data));
+	data = (Objid *) alloc_data(sizeof(*data));
 	*data = oid;
 	args = new_list(0);
 	e = call_verb(oid, "recycle", args, 0);
@@ -500,7 +500,7 @@ bf_recycle(Var arglist, Byte func_pc, void *vdata, Objid progr)
 static void
 bf_recycle_write(void *vdata)
 {
-    Objid *data = vdata;
+    Objid *data = (Objid *) vdata;
 
     dbio_printf("bf_recycle data: oid = %d, cont = 0\n", *data);
 }
@@ -508,7 +508,7 @@ bf_recycle_write(void *vdata)
 static void *
 bf_recycle_read(void)
 {
-    Objid *data = alloc_data(sizeof(*data));
+    Objid *data = (Objid *) alloc_data(sizeof(*data));
     int dummy;
 
     /* I use a `dummy' variable here and elsewhere instead of the `*'
@@ -552,10 +552,10 @@ static package
 bf_set_player_flag(Var arglist, Byte next, void *vdata, Objid progr)
 {				/* (object, yes/no) */
     Var obj;
-    char bool;
+    char boolean;
 
     obj = arglist.v.list[1];
-    bool = is_true(arglist.v.list[2]);
+    boolean = is_true(arglist.v.list[2]);
 
     free_var(arglist);
 
@@ -564,7 +564,7 @@ bf_set_player_flag(Var arglist, Byte next, void *vdata, Objid progr)
     else if (!is_wizard(progr))
 	return make_error_pack(E_PERM);
 
-    if (bool) {
+    if (boolean) {
 	db_set_object_flag(obj.v.obj, FLAG_USER);
     } else {
 	boot_player(obj.v.obj);
-- 
1.7.9.5

