From dbc541ca1e0c97e31e350ee19ffc98525fef5a93 Mon Sep 17 00:00:00 2001
From: Steve Wainstead <wainstead@gmail.com>
Date: Mon, 26 Oct 2009 22:05:55 +0000
Subject: [PATCH 059/223] Resolved the issues with expat and ident, and the
 casting problem with getsockaddress.

---
 server/Makefile.in   |    8 ++++----
 server/ext-xml.c     |    2 +-
 server/list.c        |    2 +-
 server/net_bsd_tcp.c |   10 +++++-----
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/server/Makefile.in b/server/Makefile.in
index 0677ce7..28c89f5 100644
--- a/server/Makefile.in
+++ b/server/Makefile.in
@@ -17,13 +17,13 @@
 # with autoconf2 I'll go edit it to support --with-expat=
 # Until then, set this to where you unpacked and compiled expat
 #
-EXPAT = /usr/local/src/standard/expat
 
 
-EXPAT_OBJS = $(EXPAT)/xmltok/*.o $(EXPAT)/xmlparse/*.o 
 
-CC = @CC@ -I$(EXPAT)/xmlparse
-LIBRARIES = @LIBS@ $(EXPAT_OBJS)
+EXPAT_OBJS = -lexpat
+
+CC = @CC@ 
+LIBRARIES = @LIBS@ $(EXPAT_OBJS) -lident
 YACC = @YACC@
 
 CFLAGS = -O -DEXPAT_XML
diff --git a/server/ext-xml.c b/server/ext-xml.c
index b244425..262e2d2 100644
--- a/server/ext-xml.c
+++ b/server/ext-xml.c
@@ -15,7 +15,7 @@
 #include "exceptions.h"
 #include "tasks.h"
 
-#include "xmlparse.h"
+#include <expat.h>
 
 
 /*
diff --git a/server/list.c b/server/list.c
index 87ab55c..fa0c8ca 100644
--- a/server/list.c
+++ b/server/list.c
@@ -35,7 +35,7 @@
 #include "unparse.h"
 #include "utils.h"
 
-#include <crypt.h>
+#include <unistd.h>
 
 Var
 new_list(int size)
diff --git a/server/net_bsd_tcp.c b/server/net_bsd_tcp.c
index 8d57e01..9ad2282 100644
--- a/server/net_bsd_tcp.c
+++ b/server/net_bsd_tcp.c
@@ -126,9 +126,9 @@ proto_make_listener(Var desc, int *fd, Var * canon, const char **name)
 	return e;
     }
     if (port == 0) {
-	size_t length = sizeof(address);
+	socklen_t length = sizeof(address);
 
-	if (getsockname(s, (struct sockaddr *) &address, (socklen_t *) &length) < 0) {
+	if (getsockname(s, (struct sockaddr *) &address, &length) < 0) {
 	    log_perror("Discovering local port number");
 	    close(s);
 	    return E_QUOTA;
@@ -163,13 +163,13 @@ proto_accept_connection(int listener_fd, int *read_fd, int *write_fd,
     int timeout = server_int_option("name_lookup_timeout", 5);
     int fd;
     struct sockaddr_in address;
-    size_t addr_length = sizeof(address);
+    socklen_t addr_length = sizeof(address);
     static Stream *s = 0;
 
     if (!s)
 	s = new_stream(100);
 
-    fd = accept(listener_fd, (struct sockaddr *) &address, (socklen_t *) &addr_length);
+    fd = accept(listener_fd, (struct sockaddr *) &address,  &addr_length);
     if (fd < 0) {
 	if (errno == EMFILE)
 	    return PA_FULL;
@@ -223,7 +223,7 @@ proto_open_connection(Var arglist, int *read_fd, int *write_fd,
     static const char *host_name;
     static int port;
     static Timer_ID id;
-    size_t length;
+    socklen_t length;
     int s, result;
     int timeout = server_int_option("outbound_name_lookup_timeout", 5);
     static struct sockaddr_in addr;
-- 
1.7.9.5

