commit 755558bdd368cb23a8c9a9fa52df4f4febcdf54b
Author: Steve Wainstead <wainstead@gmail.com>
Date:   Sun Jun 7 17:07:21 2009 +0000

    First round of changes to compile under c++

diff --git a/server/ast.c b/server/ast.c
index 3fce361..36212cf 100644
--- a/server/ast.c
+++ b/server/ast.c
@@ -40,7 +40,7 @@ begin_code_allocation()
 {
     pool_size = 10;
     next_pool_slot = 0;
-    pool = mymalloc(pool_size * sizeof(struct entry), M_AST_POOL);
+    pool = (entry *)mymalloc(pool_size * sizeof(struct entry), M_AST_POOL);
 }
 
 void
@@ -65,7 +65,7 @@ allocate(int size, Memory_Type type)
 	int i;
 
 	pool_size *= 2;
-	new_pool = mymalloc(pool_size * sizeof(struct entry), M_AST_POOL);
+	new_pool = (entry *)mymalloc(pool_size * sizeof(struct entry), M_AST_POOL);
 	for (i = 0; i < next_pool_slot; i++) {
 	    new_pool[i] = pool[i];
 	}
@@ -95,7 +95,7 @@ deallocate(void *ptr)
 char *
 alloc_string(const char *buffer)
 {
-    char *string = allocate(strlen(buffer) + 1, M_STRING);
+  char *string = (char *)allocate(strlen(buffer) + 1, M_STRING);
 
     strcpy(string, buffer);
     return string;
@@ -110,7 +110,7 @@ dealloc_string(char *str)
 double *
 alloc_float(double value)
 {
-    double *d = allocate(sizeof(double), M_FLOAT);
+  double *d = (double *)allocate(sizeof(double), M_FLOAT);
 
     *d = value;
     return d;
@@ -125,7 +125,7 @@ dealloc_node(void *node)
 Stmt *
 alloc_stmt(enum Stmt_Kind kind)
 {
-    Stmt *result = allocate(sizeof(Stmt), M_AST);
+  Stmt *result = (Stmt *)allocate(sizeof(Stmt), M_AST);
 
     result->kind = kind;
     result->next = 0;
@@ -135,7 +135,7 @@ alloc_stmt(enum Stmt_Kind kind)
 Cond_Arm *
 alloc_cond_arm(Expr * condition, Stmt * stmt)
 {
-    Cond_Arm *result = allocate(sizeof(Cond_Arm), M_AST);
+  Cond_Arm *result = (Cond_Arm *)allocate(sizeof(Cond_Arm), M_AST);
 
     result->condition = condition;
     result->stmt = stmt;
@@ -146,7 +146,7 @@ alloc_cond_arm(Expr * condition, Stmt * stmt)
 Except_Arm *
 alloc_except(int id, Arg_List * codes, Stmt * stmt)
 {
-    Except_Arm *result = allocate(sizeof(Except_Arm), M_AST);
+  Except_Arm *result = (Except_Arm *)allocate(sizeof(Except_Arm), M_AST);
 
     result->id = id;
     result->codes = codes;
@@ -159,7 +159,7 @@ alloc_except(int id, Arg_List * codes, Stmt * stmt)
 Expr *
 alloc_expr(enum Expr_Kind kind)
 {
-    Expr *result = allocate(sizeof(Expr), M_AST);
+  Expr *result = (Expr *)allocate(sizeof(Expr), M_AST);
 
     result->kind = kind;
     return result;
@@ -198,7 +198,7 @@ alloc_verb(Expr * obj, Expr * verb, Arg_List * args)
 Arg_List *
 alloc_arg_list(enum Arg_Kind kind, Expr * expr)
 {
-    Arg_List *result = allocate(sizeof(Arg_List), M_AST);
+  Arg_List *result = (Arg_List *)allocate(sizeof(Arg_List), M_AST);
 
     result->kind = kind;
     result->expr = expr;
@@ -209,7 +209,7 @@ alloc_arg_list(enum Arg_Kind kind, Expr * expr)
 Scatter *
 alloc_scatter(enum Scatter_Kind kind, int id, Expr * expr)
 {
-    Scatter *sc = allocate(sizeof(Scatter), M_AST);
+  Scatter *sc = (Scatter *)allocate(sizeof(Scatter), M_AST);
 
     sc->kind = kind;
     sc->id = id;
@@ -315,10 +315,10 @@ free_expr(Expr * expr)
 	break;
 
     case EXPR_CATCH:
-	free_expr(expr->e.catch.try);
-	free_arg_list(expr->e.catch.codes);
-	if (expr->e.catch.except)
-	    free_expr(expr->e.catch.except);
+	free_expr(expr->e._catch._try);
+	free_arg_list(expr->e._catch.codes);
+	if (expr->e._catch.except)
+	    free_expr(expr->e._catch.except);
 	break;
 
     case EXPR_SCATTER:
@@ -384,8 +384,8 @@ free_stmt(Stmt * stmt)
 	    break;
 
 	case STMT_TRY_EXCEPT:
-	    free_stmt(stmt->s.catch.body);
-	    for (except = stmt->s.catch.excepts; except; except = next_e) {
+	    free_stmt(stmt->s._catch.body);
+	    for (except = stmt->s._catch.excepts; except; except = next_e) {
 		next_e = except->next;
 		free_arg_list(except->codes);
 		free_stmt(except->stmt);
diff --git a/server/ast.h b/server/ast.h
index 32242c5..64ae554 100644
--- a/server/ast.h
+++ b/server/ast.h
@@ -76,7 +76,7 @@ struct Expr_Cond {
 };
 
 struct Expr_Catch {
-    Expr *try;
+    Expr *_try;
     Arg_List *codes;
     Expr *except;
 };
@@ -103,7 +103,7 @@ union Expr_Data {
     struct Expr_Verb verb;
     struct Expr_Range range;
     struct Expr_Cond cond;
-    struct Expr_Catch catch;
+    struct Expr_Catch _catch;
     Expr *expr;
     Arg_List *list;
     Scatter *scatter;
@@ -179,7 +179,7 @@ union Stmt_Data {
     struct Stmt_Range range;
     struct Stmt_Loop loop;
     struct Stmt_Fork fork;
-    struct Stmt_Catch catch;
+    struct Stmt_Catch _catch;
     struct Stmt_Finally finally;
     Expr *expr;
     int exit;
diff --git a/server/db.h b/server/db.h
index de92139..50016c5 100644
--- a/server/db.h
+++ b/server/db.h
@@ -236,7 +236,7 @@ extern int db_add_propdef(Objid oid, const char *pname,
 				 */
 
 extern int db_rename_propdef(Objid oid, const char *old,
-			     const char *new);
+			     const char *_new);
 				/* Returns true (and actually renames the
 				 * propdef on OID) iff (1) a propdef with the
 				 * name OLD existed on OID, (2) no property
diff --git a/server/exceptions.h b/server/exceptions.h
index 4ddddb9..95015ad 100644
--- a/server/exceptions.h
+++ b/server/exceptions.h
@@ -1,12 +1,12 @@
 /******************************************************************************
   Copyright (c) 1992, 1995, 1996 Xerox Corporation.  All rights reserved.
-  Portions of this code were written by Stephen White, aka ghond.
-  Use and copying of this software and preparation of derivative works based
-  upon this software are permitted.  Any distribution of this software or
+  Portions of _this code were written by Stephen White, aka ghond.
+  Use and copying of _this software and preparation of derivative works based
+  upon _this software are permitted.  Any distribution of _this software or
   derivative works must comply with all applicable United States export
   control laws.  This software is made available AS IS, and Xerox Corporation
   makes no warranty about the software, its performance or its conformity to
-  any specification.  Any person obtaining a copy of this software is requested
+  any specification.  Any person obtaining a copy of _this software is requested
   to send their name and post office or electronic mail address to:
     Pavel Curtis
     Xerox PARC
@@ -29,10 +29,10 @@
 /* ------------------------------------------------------------------------- */
 /* The exceptions package provides a general exception handling mechanism    */
 /* for use with C that is portable across a variety of compilers and         */
-/* operating systems. The design of this facility is based on the            */
+/* operating systems. The design of _this facility is based on the            */
 /* exception handling mechanism used in the Modula-2+ language at DEC/SRC    */
 /* and is described in detail in the paper cited above.                      */
-/* For more background on the underlying motivation for this design, see     */
+/* For more background on the underlying motivation for _this design, see     */
 /* SRC Research Report #3.                                                   */
 /*****************************************************************************/
 
@@ -72,16 +72,16 @@ typedef struct {
     int junk;
 } Exception;			/* Only addr. of exception is used. */
 
-typedef volatile struct ES_CtxBlock ES_CtxBlock;
-struct ES_CtxBlock {
+//struct ES_CtxBlock ES_CtxBlock;
+typedef struct ES_CtxBlock {
     jmp_buf jmp;
     int nx;
     Exception *array[ES_MaxExceptionsPerScope];
     Exception *id;
     int value;
-    int finally;
+    int _finally;
     ES_CtxBlock *link;
-};
+} ES_CtxBlock;
 
 extern Exception ANY;
 extern ES_CtxBlock *ES_exceptionStack;
@@ -93,10 +93,10 @@ extern void ES_RaiseException(Exception * exception, int value);
 #define TRY							\
 	{							\
 	    ES_CtxBlock		ES_ctx;				\
-	    volatile ES_Value	ES_es = ES_Initialize;		\
+	    volatile ES_Value	ES_es = ES_Initialize;    \
 								\
 	    ES_ctx.nx = 0;					\
-	    ES_ctx.finally = 0;					\
+	    ES_ctx._finally = 0;					\
 	    ES_ctx.link = ES_exceptionStack;			\
 	    ES_exceptionStack = &ES_ctx;			\
 	    							\
@@ -149,7 +149,7 @@ extern void ES_RaiseException(Exception * exception, int value);
 	}
 
 
-/* The exceptions package doesn't provide this function, but it calls it */
+/* The exceptions package doesn't provide _this function, but it calls it */
 /* whenever a fatal error occurs:                                        */
 /*      1) Too many EXCEPT clauses in a single TRY construct.            */
 /*      2) An unhandled exception is RAISEd.                             */
@@ -159,7 +159,10 @@ extern void panic(const char *message);
 #endif				/* !Exceptions_H */
 
 /* 
- *$Log: not supported by cvs2svn $
+ *$Log: exceptions.h,v $
+ *Revision 1.3  1998/12/14 13:17:49  nop
+ *Merge UNSAFE_OPTS (ref fixups); fix Log tag placement to fit CVS whims
+ *
  * Revision 1.2  1997/03/03 04:18:37  nop
  * GNU Indent normalization
  *
@@ -176,10 +179,10 @@ extern void panic(const char *message);
  * Added copyright notice.
  *
  * Revision 1.3  1992/10/21  03:02:35  pavel
- * Converted to use new automatic configuration system.
+ * Converted to use _new automatic configuration system.
  *
  * Revision 1.2  1992/09/23  17:10:48  pavel
- * Added protection against this file being included more than once.
+ * Added protection against _this file being included more than once.
  *
  * Revision 1.1  1992/07/20  23:23:12  pavel
  * Initial RCS-controlled version.
